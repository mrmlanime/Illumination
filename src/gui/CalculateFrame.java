 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import logic.CU20Calculation;
import logic.CUMultiplierCalculation;
import logic.EffectiveReflectanceCalculation;
import logic.FileService;
import logic.MathService;
import logic.SetLookAndFeel;
import model.CU;
import model.Reflectance;
import model.Room;

/**
 *
 * @author YANIXMRML
 */
public class CalculateFrame extends javax.swing.JFrame {

    public static final int EFFECTIVE = 0;
    public static final int CU = 1;
    public static final int LUMINAIRE = 2;
    
    private String ROOT_DIRECTORY;
    private final String INPUT_DIRECTORY = "data\\input\\";    
    private final String OUTPUT_DIRECTORY = "data\\output\\";
    private final String TABLE_DIRECTORY = "data\\tables\\";
    
    private String inputFile;
    private String outputFile;
    private final EffectiveReflectanceCalculation refCalculation;
    private final CU20Calculation cu20Calculation;
    private final CUMultiplierCalculation cuMultiplierCalculation;
    private ArrayList<Reflectance> reflectanceTable;
    private ArrayList<CU> cu20Table;
    private ArrayList<CU> cuMultiplierTable;
    
    private final String effectiveRefTableFile;
    private final String CUMultiplierTableFile;
    private boolean isTableInitialize;
    /**
     * Creates new form ExtractFrame
     */
    public CalculateFrame() {
        SetLookAndFeel.setLookandFeel();
        initComponents();
        this.effectiveRefTableFile = "/file/EffectiveReflectanceTable.csv";
        this.CUMultiplierTableFile = "/file/CUMultiplierTable.csv";
        this.refCalculation = new EffectiveReflectanceCalculation();
        this.cu20Calculation = new CU20Calculation();
        this.cuMultiplierCalculation = new CUMultiplierCalculation();
        this.isTableInitialize = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        calculateButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskArea = new javax.swing.JTextArea();
        typeCombo = new javax.swing.JComboBox();
        browseButton = new javax.swing.JButton();
        initializeTableButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        inputFileTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        progressLabel.setText("Running Window...");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        taskArea.setEditable(false);
        taskArea.setColumns(20);
        taskArea.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        taskArea.setRows(5);
        taskArea.setText("---- < Choose Room Details CSV File >\n---- < Click \"Calculate\" button to begin Zonal Cavity Method calculation >\n");
        jScrollPane1.setViewportView(taskArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );

        typeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Effective Reflectance", "Effective Reflectance + CU", "Effective Ref + CU + No. of Luminaires" }));

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        initializeTableButton.setText("Intialize Table");
        initializeTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initializeTableButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("- ZONAL CAVITY METHOD CALCULATOR -");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel4.setText("Created by Mark Longhas");

        inputFileTextField.setEditable(false);
        inputFileTextField.setText("< Input Filename >");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");

        jMenuItem1.setText("Help");
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4))
                            .addComponent(typeCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputFileTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(initializeTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(browseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(calculateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(initializeTableButton)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(inputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculateButton)
                    .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(             
               JFileChooser.FILES_AND_DIRECTORIES);      
        int result = fileChooser.showOpenDialog( this );

        if ( result == JFileChooser.CANCEL_OPTION ){
            fileChooser.setVisible(false);
        }else{

            File fileName = fileChooser.getSelectedFile(); // get the selected file
            if ( ( fileName == null ) || ( fileName.getName().equals( "" ) ) ){
                JOptionPane.showMessageDialog( this, "Invalid File Name",
                       "Invalid File Name", JOptionPane.ERROR_MESSAGE );

            }else{
                inputFile = replaceBackSlash(fileName.toString());
                inputFileTextField.setText(fileName.toString());
            }
        }   
    }//GEN-LAST:event_browseButtonActionPerformed

    private void initializeTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initializeTableButtonActionPerformed
        try {
            // TODO add your handling code here:
            Path currentRelativePath = Paths.get("");
            String s = currentRelativePath.toAbsolutePath().toString();
            this.ROOT_DIRECTORY = s + "\\";
            updateStatus("\n****************************************************\n Loadingssss effective reflectance table...\n",20,"Loading Tables...");
            reflectanceTable = FileService.uploadReflectanceTable(this.effectiveRefTableFile);
            updateStatus("\n****************************************************\n Done loading effective reflectance table...\n",30,"Loading Tables...");
            updateStatus("\n****************************************************\n Loading coefficient of utilization"
                    + " table for every luminaire...\n",40,"Loading Tables...");
            
            JOptionPane.showMessageDialog(this, "Table Directory: " + this.ROOT_DIRECTORY + this.TABLE_DIRECTORY);
            this.cu20Table = FileService.uploadCU20Table(this.ROOT_DIRECTORY + this.TABLE_DIRECTORY);
            updateStatus("\n****************************************************\n Done loading coefficient of utilization table for every luminaire...\n",70,"Done Loading Tables...");
            
            updateStatus("\n****************************************************\n Loading coefficient of utilization multiplier table"
                    + " table \n",80,"Loading Tables...");
            this.cuMultiplierTable = FileService.uploadCUMultipliearTable(this.CUMultiplierTableFile);
            updateStatus("\n****************************************************\n Done loading coefficient of utilization multiplier table"
                    + " table \n",100,"Loading Tables...");
            /*for(CU cu : cu20Table){
                taskArea.append("\n");
                String r = cu.getLuminaireNo() + ", " + cu.getLldCategory() + ", " + cu.getCeilRef().size();
                for(CeilingEffectiveReflectance ceil : cu.getCeilRef()){
                    r += "\n" + ceil.getCeilingEffectiveReflectance();
                    r += "\n" + ceil.getWallEffectiveReflectances().size();
                    for(WallEffectiveReflectance wall : ceil.getWallEffectiveReflectances()){
                        r += "\n" + wall.getWallReflectance() + "\n";
                        for(Double cus : wall.getCU()){
                            r += cus + ", ";
                        }
                        r += "\n";
                    }
                }
                taskArea.append(r);
            }*/
            this.refCalculation.setList(this.reflectanceTable);
            this.cu20Calculation.setCuList(this.cu20Table);
            this.cuMultiplierCalculation.setCuMultiplierList(cuMultiplierTable);
            this.isTableInitialize = true;
        } catch (Exception ex) {
            updateStatus("\n ERROR: Initializing the tables. " + ex.getMessage() + "\n");
            Logger.getLogger(CalculateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_initializeTableButtonActionPerformed

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        // TODO add your handling code here:
        if(inputFile==null || inputFile.equals("")){
            JOptionPane.showMessageDialog(this,"Please browse your input file", "Input File", JOptionPane.INFORMATION_MESSAGE);
        }else if(isTableInitialize){
            Date date = new Date();
            outputFile = ROOT_DIRECTORY + OUTPUT_DIRECTORY + "output_" + date.getTime() + ".xls";
            //inputFile = ROOT_DIRECTORY + INPUT_DIRECTORY + "input.csv";
            if(!inputFile.equals("")){
                initializeTableButtonActionPerformed(evt);
                try { 
                    if(EFFECTIVE == typeCombo.getSelectedIndex()){
                        //readFile
                        updateStatus("\n****************************************************\n Calculating effective relfectance...\n",30,"Calculating Values...");
                        calculateEffective();
                    }else{
                        updateStatus("\n****************************************************\n Calculating effective relfectance + CU...\n",30,"Calculating Values...");
                        calculateEffectiveCU();    
                    }
                    updateStatus("\n****************************************************\n Done calculating values...\n",0,"Done Calculating Values...");
                    updateStatus("\n Check the output file: " + outputFile + "\n",0,"Done Calculating Values...");
                } catch (IOException ex) {
                    updateStatus("\n ERROR: Calculating values. " + ex.getMessage() + "\n");
                    Logger.getLogger(CalculateFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (WriteException ex) {
                    updateStatus("\n ERROR: Calculating values. " + ex.getMessage() + "\n");
                    Logger.getLogger(CalculateFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(this, "Input file was not set. Browse your input file." ,"Browse Input File", JOptionPane.INFORMATION_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Please initialize the talbes. Check Help in the menu to load and initialize the table.", "Load Table", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void calculateEffective() throws FileNotFoundException, IOException, WriteException{
        BufferedReader buff = new BufferedReader(new FileReader(inputFile));
        WritableWorkbook workBook = Workbook.createWorkbook(new File(outputFile));
        WritableSheet wsheet = workBook.createSheet("Effective Reflectance",0);
        String line = buff.readLine();
        wsheet.addCell(new Label(0,0,"ROOM"));
        wsheet.addCell(new Label(1,0,"AREA"));
        wsheet.addCell(new Label(2,0,"PERIMETER"));
        wsheet.addCell(new Label(3,0,"HEIGHT"));
        wsheet.addCell(new Label(4,0,"DESIRED FLUX"));
        wsheet.addCell(new Label(5,0,"APPROX. CEIL REFLECTANCE"));
        wsheet.addCell(new Label(6,0,"APPROX. WALL REFLECTANCE"));
        wsheet.addCell(new Label(7,0,"APPROX. FLOOR REFLECTANCE"));
        wsheet.addCell(new Label(8,0,"hcc"));
        wsheet.addCell(new Label(9,0,"hrc"));
        wsheet.addCell(new Label(10,0,"hfc"));
        wsheet.addCell(new Label(11,0,"CCR"));
        wsheet.addCell(new Label(12,0,"RCR"));
        wsheet.addCell(new Label(13,0,"FCR"));
        wsheet.addCell(new Label(14,0,"ρcc"));
        wsheet.addCell(new Label(15,0,"ρwc"));
        wsheet.addCell(new Label(16,0,"ρfc"));
        int row = 1;
        while((line=buff.readLine())!=null){
            StringTokenizer str = new StringTokenizer(line.replace(" ","")," ,\t\n\r\f");
            Room room = new Room();
            System.out.println(line);
            String roomName = str.nextToken();
            wsheet.addCell(new Label(0,row,roomName));
            room.setLlType(str.nextToken());
            room.setType(str.nextToken());
            room.setLength(Double.parseDouble(str.nextToken()));
            room.setWidth(Double.parseDouble(str.nextToken()));
            room.setAngle(Double.parseDouble(str.nextToken()));
            room.setRadius(Double.parseDouble(str.nextToken()));
            room.setBase1(Double.parseDouble(str.nextToken()));
            room.setBase2(Double.parseDouble(str.nextToken()));
            room.setHeight(Double.parseDouble(str.nextToken()));
            room.setDesiredFlux(Double.parseDouble(str.nextToken()));
            room.setApproxCeilRef(Double.parseDouble(str.nextToken()));
            room.setApproxWallRef(Double.parseDouble(str.nextToken()));
            room.setApproxFloorRef(Double.parseDouble(str.nextToken()));
            room.setHc(Double.parseDouble(str.nextToken()));
            room.setHf(Double.parseDouble(str.nextToken()));
            
            room.setArea(MathService.calculateArea(room));
            room.setPermiter(MathService.calculatePerimeter(room));
            wsheet.addCell(new Label(1,row,room.getArea() + ""));
            wsheet.addCell(new Label(2,row,room.getPermiter() + ""));
            wsheet.addCell(new Label(3,row,room.getHeight() + ""));
            wsheet.addCell(new Label(4,row,room.getDesiredFlux() + ""));
            wsheet.addCell(new Label(5,row,room.getApproxCeilRef() + ""));
            wsheet.addCell(new Label(6,row,room.getApproxWallRef() + ""));
            wsheet.addCell(new Label(7,row,room.getApproxFloorRef() + ""));
            wsheet.addCell(new Label(8,row,room.getHc() + ""));
            wsheet.addCell(new Label(9,row,room.getHr() + ""));
            wsheet.addCell(new Label(10,row,room.getHf() + ""));
            room.setCcr(MathService.calculateCavityRatio(room.getHc(), room));
            wsheet.addCell(new Label(11,row,room.getCcr()+ ""));
            room.setRcr(MathService.calculateCavityRatio(room.getHr(), room));
            wsheet.addCell(new Label(12,row,room.getRcr()+ ""));
            
            room.setFcr(MathService.calculateCavityRatio(room.getHf(), room));
            wsheet.addCell(new Label(13,row,room.getFcr()+ ""));
            wsheet.addCell(new Label(14,row,refCalculation.calculateEffectiveReflectance(room.getCcr(),room.getApproxCeilRef(),room.getApproxWallRef()) + ""));
            //wsheet.addCell(new Label(14,row,"dfd"));
            wsheet.addCell(new Label(15,row,room.getApproxWallRef() + ""));
            wsheet.addCell(new Label(16,row,refCalculation.calculateEffectiveReflectance(room.getFcr(),room.getApproxFloorRef(),room.getApproxWallRef()) + ""));
             //wsheet.addCell(new Label(16,row,"dfd"));
            row++;
        }
        workBook.write();
        workBook.close();
        buff.close();
        
    }
    
    private void calculateEffectiveCU() throws FileNotFoundException, IOException, WriteException{
        BufferedReader buff = new BufferedReader(new FileReader(inputFile));
        WritableWorkbook workBook = Workbook.createWorkbook(new File(outputFile));
        WritableSheet wsheet = workBook.createSheet("Effective Reflectance",0);
        String line = buff.readLine();
        wsheet.addCell(new Label(0,0,"ROOM"));
        wsheet.addCell(new Label(1,0,"AREA"));
        wsheet.addCell(new Label(2,0,"PERIMETER"));
        wsheet.addCell(new Label(3,0,"HEIGHT"));
        wsheet.addCell(new Label(4,0,"DESIRED FLUX"));
        wsheet.addCell(new Label(5,0,"APPROX. CEIL REFLECTANCE"));
        wsheet.addCell(new Label(6,0,"APPROX. WALL REFLECTANCE"));
        wsheet.addCell(new Label(7,0,"APPROX. FLOOR REFLECTANCE"));
        wsheet.addCell(new Label(8,0,"hcc"));
        wsheet.addCell(new Label(9,0,"hrc"));
        wsheet.addCell(new Label(10,0,"hfc"));
        wsheet.addCell(new Label(11,0,"CCR"));
        wsheet.addCell(new Label(12,0,"RCR"));
        wsheet.addCell(new Label(13,0,"FCR"));
        wsheet.addCell(new Label(14,0,"ρcc"));
        wsheet.addCell(new Label(15,0,"ρwc"));
        wsheet.addCell(new Label(16,0,"ρfc"));
        wsheet.addCell(new Label(17,0,"CU (20%)"));
        wsheet.addCell(new Label(18,0,"CU (Multiplier)"));
        int row = 1;
        while((line=buff.readLine())!=null){
            StringTokenizer str = new StringTokenizer(line.replace(" ","")," ,\t\n\r\f");
            Room room = new Room();
            String roomName = str.nextToken();
            wsheet.addCell(new Label(0,row,roomName));
            room.setLlType(str.nextToken());
            room.setType(str.nextToken());
            room.setLength(Double.parseDouble(str.nextToken()));
            room.setWidth(Double.parseDouble(str.nextToken()));
            room.setAngle(Double.parseDouble(str.nextToken()));
            room.setRadius(Double.parseDouble(str.nextToken()));
            room.setBase1(Double.parseDouble(str.nextToken()));
            room.setBase2(Double.parseDouble(str.nextToken()));
            room.setHeight(Double.parseDouble(str.nextToken()));
            room.setDesiredFlux(Double.parseDouble(str.nextToken()));
            room.setApproxCeilRef(Double.parseDouble(str.nextToken()));
            room.setApproxWallRef(Double.parseDouble(str.nextToken()));
            room.setApproxFloorRef(Double.parseDouble(str.nextToken()));
            room.setHc(Double.parseDouble(str.nextToken()));
            room.setHf(Double.parseDouble(str.nextToken()));
            
            room.setArea(MathService.calculateArea(room));
            room.setPermiter(MathService.calculatePerimeter(room));
            wsheet.addCell(new Label(1,row,room.getArea() + ""));
            wsheet.addCell(new Label(2,row,room.getPermiter() + ""));
            wsheet.addCell(new Label(3,row,room.getHeight() + ""));
            wsheet.addCell(new Label(4,row,room.getDesiredFlux() + ""));
            wsheet.addCell(new Label(5,row,room.getApproxCeilRef() + ""));
            wsheet.addCell(new Label(6,row,room.getApproxWallRef() + ""));
            wsheet.addCell(new Label(7,row,room.getApproxFloorRef() + ""));
            wsheet.addCell(new Label(8,row,room.getHc() + ""));
            wsheet.addCell(new Label(9,row,room.getHr() + ""));
            wsheet.addCell(new Label(10,row,room.getHf() + ""));
            room.setCcr(MathService.calculateCavityRatio(room.getHc(), room));
            wsheet.addCell(new Label(11,row,room.getCcr()+ ""));
            room.setRcr(MathService.calculateCavityRatio(room.getHr(), room));
            wsheet.addCell(new Label(12,row,room.getRcr()+ ""));
            
            room.setFcr(MathService.calculateCavityRatio(room.getHf(), room));
            wsheet.addCell(new Label(13,row,room.getFcr()+ ""));
            room.setEffectiveCeilRef(refCalculation.calculateEffectiveReflectance(room.getCcr(),room.getApproxCeilRef(),room.getApproxWallRef()));
            wsheet.addCell(new Label(14,row, room.getEffectiveCeilRef() + ""));
            //wsheet.addCell(new Label(14,row,"dfd"));
            wsheet.addCell(new Label(15,row,room.getApproxWallRef() + ""));
            room.setEffectiveFloorRef(refCalculation.calculateEffectiveReflectance(room.getFcr(),room.getApproxFloorRef(),room.getApproxWallRef()));
            wsheet.addCell(new Label(16,row, room.getEffectiveFloorRef()+ ""));
             //wsheet.addCell(new Label(16,row,"dfd"));
            wsheet.addCell(new Label(17,row,cu20Calculation.calculateCU20(room.getLlno(),room.getEffectiveCeilRef(),room.getApproxWallRef(),room.getRcr()) + ""));
            wsheet.addCell(new Label(18,row,cuMultiplierCalculation.calculateCUMultiplier(room.getEffectiveCeilRef(),room.getApproxWallRef(),room.getEffectiveFloorRef(),room.getRcr()) + ""));
            row++;
        }
        workBook.write();
        workBook.close();
        buff.close();
        
    }
    
    private String replaceBackSlash(String str){
    
        String temp = "";

        for(int i=0;i<str.length();i++){

            if(str.charAt(i)=='\\'){
                temp += "/";
            }else{
                temp += str.charAt(i);
            }
        }

        return temp;
    }
    
    private void updateStatus(String message, int progress, String progressMessage){
        taskArea.append(message);
        progressBar.setValue(progress);
        progressLabel.setText(progressMessage);
    }
    
    private void updateStatus(String message){
        this.updateStatus(message,100,"Running Window...");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton calculateButton;
    private javax.swing.JButton initializeTableButton;
    private javax.swing.JTextField inputFileTextField;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JTextArea taskArea;
    private javax.swing.JComboBox typeCombo;
    // End of variables declaration//GEN-END:variables
}
